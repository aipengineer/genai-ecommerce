here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/README.md:
<README.md>
# üõçÔ∏è GenAI E-commerce

E-commerce exploratory platform with AI-powered recommendations using classic and modern embedding techniques.

## Features

- Product feed ingestion from AboutYou API
- Local caching of products and images
- Classic clustering-based recommendations
- Vector embeddings for similarity search
- Web interface for product browsing and recommendations

## Prerequisites

- Python 3.12
- UV package manager

## Quick Start

```bash
# Setup environment
make setup
source setup.sh

# Run web application
make run-web
```

Visit http://localhost:8000

## Project Structure

```
src/
‚îú‚îÄ‚îÄ genai_ecommerce_core/    # Core functionality
‚îÇ   ‚îú‚îÄ‚îÄ client.py           # API client
‚îÇ   ‚îú‚îÄ‚îÄ database.py         # SQLite models
‚îÇ   ‚îî‚îÄ‚îÄ models.py          # Pydantic models
‚îú‚îÄ‚îÄ genai_ecommerce_ml/     # ML components
‚îÇ   ‚îú‚îÄ‚îÄ clustering.py      # Classic recommendations
‚îÇ   ‚îî‚îÄ‚îÄ embeddings.py      # Vector embeddings
‚îî‚îÄ‚îÄ genai_ecommerce_web/    # Web interface
    ‚îú‚îÄ‚îÄ app.py            # FastAPI application
    ‚îî‚îÄ‚îÄ templates/        # Jinja2 templates
```

## Development

```bash
# Format code
make format

# Run linters
make lint

# Run tests
make test

# Run all checks
make pre-commit
```</README.md>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/routers/__init__.py:
<__init__.py>
</__init__.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/routers/api.py:
<api.py>
# src/genai_ecommerce_web/routers/api.py
from typing import List
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from genai_ecommerce_core.models import Product
from ..dependencies import get_db

router = APIRouter()


@router.get("/products", response_model=List[Product])
async def get_products(skip: int = 0, limit: int = 20, db: Session = Depends(get_db)):
    try:
        products = await db.query(Product).offset(skip).limit(limit).all()
        return products
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/products/{product_id}", response_model=Product)
async def get_product(product_id: int, db: Session = Depends(get_db)):
    try:
        product = await db.query(Product).filter(Product.id == product_id).first()
        if product is None:
            raise HTTPException(status_code=404, detail="Product not found")
        return product
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</api.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/__init__.py:
<__init__.py>
</__init__.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/app.py:
<app.py>
# src/genai_ecommerce_web/app.py
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import HTMLResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from pathlib import Path

from .routers import api
from .dependencies import get_db

app = FastAPI(title="GenAI E-commerce")

templates = Jinja2Templates(directory=str(Path(__file__).parent / "templates"))
app.mount(
    "/static",
    StaticFiles(directory=str(Path(__file__).parent / "static")),
    name="static",
)

app.include_router(api.router, prefix="/api")


@app.get("/", response_class=HTMLResponse)
async def index(request: Request):
    try:
        return templates.TemplateResponse("catalog.html", {"request": request})
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/product/{product_id}", response_class=HTMLResponse)
async def product_detail(request: Request, product_id: int):
    try:
        return templates.TemplateResponse(
            "product.html", {"request": request, "product_id": product_id}
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
</app.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/__main__.py:
<__main__.py>
# src/genai_ecommerce_web/__main__.py
import uvicorn
from .app import app

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
</__main__.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_web/dependencies.py:
<dependencies.py>
# src/genai_ecommerce_web/dependencies.py
from typing import Generator
from sqlalchemy.orm import Session
from fastapi import Depends
from genai_ecommerce_core.database import init_db


async def get_db() -> Generator[Session, None, None]:
    db = await init_db("sqlite:///ecommerce.db")
    try:
        yield db
    finally:
        db.close()
</dependencies.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_ml/clustering.py:
<clustering.py>
"""Clustering-based recommender system."""

from typing import List, Dict, Any
import numpy as np
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import joblib

from .base import BaseRecommender
from genai_ecommerce_core.models import Product


class ClusteringRecommender(BaseRecommender):
    """Product recommender using K-means clustering."""

    def __init__(self, n_clusters: int = 10):
        self.n_clusters = n_clusters
        self.kmeans = KMeans(n_clusters=n_clusters)
        self.scaler = StandardScaler()
        self.products: List[Product] = []
        self.features: np.ndarray = None

    def _extract_features(self, product: Product) -> List[float]:
        """Extract numerical features from product."""
        features = [
            product.price.amount,
            len(product.attributes),
            len(product.categories),
            float(bool(product.description)),  # Has description
            len(product.images),
        ]
        if product.price.original_amount:
            features.append(product.price.discount_percentage or 0.0)
        else:
            features.append(0.0)
        return features

    async def fit(self, products: List[Product]) -> None:
        """Train the clustering model."""
        self.products = products
        features = [self._extract_features(p) for p in products]
        self.features = self.scaler.fit_transform(features)
        self.kmeans.fit(self.features)

    async def recommend(
        self, product: Product, n_recommendations: int = 5
    ) -> List[Product]:
        """Get recommendations based on cluster membership."""
        features = self._extract_features(product)
        scaled_features = self.scaler.transform([features])
        cluster = self.kmeans.predict(scaled_features)[0]

        # Find products in same cluster
        cluster_mask = self.kmeans.labels_ == cluster
        cluster_products = [p for i, p in enumerate(self.products) if cluster_mask[i]]

        # Sort by price similarity
        target_price = product.price.amount
        sorted_products = sorted(
            cluster_products, key=lambda p: abs(p.price.amount - target_price)
        )

        # Remove the input product if present
        recommendations = [p for p in sorted_products if p.id != product.id]
        return recommendations[:n_recommendations]

    async def save(self, path: str) -> None:
        """Save model to disk."""
        model_data = {
            "kmeans": self.kmeans,
            "scaler": self.scaler,
            "products": [p.model_dump() for p in self.products],
            "features": self.features,
        }
        joblib.dump(model_data, path)

    async def load(self, path: str) -> None:
        """Load model from disk."""
        model_data = joblib.load(path)
        self.kmeans = model_data["kmeans"]
        self.scaler = model_data["scaler"]
        self.products = [Product.model_validate(p) for p in model_data["products"]]
        self.features = model_data["features"]
</clustering.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_ml/__init__.py:
<__init__.py>
</__init__.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_ml/embeddings.py:
<embeddings.py>
"""Embedding-based recommender system."""

from typing import List, Dict, Any
import numpy as np
from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
import joblib

from .base import BaseRecommender
from genai_ecommerce_core.models import Product


class EmbeddingRecommender(BaseRecommender):
    """Product recommender using text and image embeddings."""

    def __init__(self, model_name: str = "all-MiniLM-L6-v2"):
        self.text_model = SentenceTransformer(model_name)
        self.products: List[Product] = []
        self.embeddings: np.ndarray = None

    def _get_product_text(self, product: Product) -> str:
        """Combine product text fields for embedding."""
        text_parts = [
            product.name,
            product.description or "",
            product.brand or "",
            *[attr.value for attr in product.attributes],
            *[cat.name for cat in product.categories],
        ]
        return " ".join(text_parts)

    async def fit(self, products: List[Product]) -> None:
        """Generate embeddings for all products."""
        self.products = products
        texts = [self._get_product_text(p) for p in products]
        self.embeddings = self.text_model.encode(texts, convert_to_tensor=True)

    async def recommend(
        self, product: Product, n_recommendations: int = 5
    ) -> List[Product]:
        """Get recommendations based on embedding similarity."""
        text = self._get_product_text(product)
        query_embedding = self.text_model.encode([text], convert_to_tensor=True)

        # Calculate similarities
        similarities = cosine_similarity(query_embedding, self.embeddings)[0]

        # Get top similar products
        similar_indices = np.argsort(similarities)[::-1]
        recommendations = []

        for idx in similar_indices:
            if self.products[idx].id != product.id:
                recommendations.append(self.products[idx])
                if len(recommendations) >= n_recommendations:
                    break

        return recommendations

    async def save(self, path: str) -> None:
        """Save model to disk."""
        model_data = {
            "products": [p.model_dump() for p in self.products],
            "embeddings": self.embeddings.cpu().numpy(),
        }
        joblib.dump(model_data, path)

    async def load(self, path: str) -> None:
        """Load model from disk."""
        model_data = joblib.load(path)
        self.products = [Product.model_validate(p) for p in model_data["products"]]
        self.embeddings = model_data["embeddings"]
</embeddings.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_ml/base.py:
<base.py>
"""Base classes for recommender systems."""

from abc import ABC, abstractmethod
from typing import List, Dict, Any
import numpy as np

from genai_ecommerce_core.models import Product


class BaseRecommender(ABC):
    """Base class for all recommender systems."""

    @abstractmethod
    async def fit(self, products: List[Product]) -> None:
        """Train the recommender system."""
        pass

    @abstractmethod
    async def recommend(
        self, product: Product, n_recommendations: int = 5
    ) -> List[Product]:
        """Get recommendations for a product."""
        pass

    @abstractmethod
    async def save(self, path: str) -> None:
        """Save model to disk."""
        pass

    @abstractmethod
    async def load(self, path: str) -> None:
        """Load model from disk."""
        pass
</base.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_core/models.py:
<models.py>
# genai-ecommerce/src/genai_ecommerce_core/models.py
"""Core data models for the GenAI E-commerce project."""

from datetime import datetime
from typing import List, Optional, Dict, Any
from pydantic import BaseModel, Field


class Price(BaseModel):
    """Price information for a product."""

    amount: float
    currency: str
    original_amount: Optional[float] = None
    discount_percentage: Optional[float] = None


class Attribute(BaseModel):
    """Product attribute."""

    key: str
    value: str
    group: Optional[str] = None


class Category(BaseModel):
    """Product category."""

    id: int
    name: str
    parent_id: Optional[int] = None
    level: int = Field(default=0)
    path: str


class Image(BaseModel):
    """Product image."""

    url: str
    type: str = Field(default="standard")
    local_path: Optional[str] = None


class Product(BaseModel):
    """Main product model."""

    id: int
    name: str
    description: Optional[str] = None
    brand: Optional[str] = None
    price: Price
    images: List[Image] = Field(default_factory=list)
    categories: List[Category] = Field(default_factory=list)
    attributes: List[Attribute] = Field(default_factory=list)
    created_at: datetime
    updated_at: datetime
    raw_data: Dict[str, Any] = Field(default_factory=dict)


class ProductResponse(BaseModel):
    """API response for product listing."""

    entities: List[Product]
    pagination: Dict[str, Any]
</models.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_core/database.py:
<database.py>
# genai-ecommerce/src/genai_ecommerce_core/database.py
"""Database models and utilities for the GenAI E-commerce project."""

from datetime import datetime
from typing import Optional
from sqlalchemy import (
    create_engine,
    Column,
    Integer,
    String,
    Float,
    DateTime,
    ForeignKey,
    JSON,
)
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship

Base = declarative_base()


class DBProduct(Base):
    """Product table."""

    __tablename__ = "products"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    description = Column(String, nullable=True)
    brand = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    raw_data = Column(JSON)

    # Relationships
    prices = relationship("DBPrice", back_populates="product")
    images = relationship("DBImage", back_populates="product")
    attributes = relationship("DBAttribute", back_populates="product")
    categories = relationship("DBProductCategory", back_populates="product")


class DBPrice(Base):
    """Price history table."""

    __tablename__ = "prices"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    amount = Column(Float, nullable=False)
    currency = Column(String, nullable=False)
    original_amount = Column(Float, nullable=True)
    discount_percentage = Column(Float, nullable=True)
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    product = relationship("DBProduct", back_populates="prices")


class DBCategory(Base):
    """Category hierarchy table."""

    __tablename__ = "categories"

    id = Column(Integer, primary_key=True)
    name = Column(String, nullable=False)
    parent_id = Column(Integer, ForeignKey("categories.id"), nullable=True)
    level = Column(Integer, default=0)
    path = Column(String, nullable=False)

    # Self-referential relationship
    children = relationship("DBCategory")


class DBProductCategory(Base):
    """Product-Category association table."""

    __tablename__ = "product_categories"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    category_id = Column(Integer, ForeignKey("categories.id"))

    # Relationships
    product = relationship("DBProduct", back_populates="categories")
    category = relationship("DBCategory")


class DBAttribute(Base):
    """Product attributes table."""

    __tablename__ = "attributes"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    key = Column(String, nullable=False)
    value = Column(String, nullable=False)
    group = Column(String, nullable=True)

    # Relationships
    product = relationship("DBProduct", back_populates="attributes")


class DBImage(Base):
    """Product images table."""

    __tablename__ = "images"

    id = Column(Integer, primary_key=True)
    product_id = Column(Integer, ForeignKey("products.id"))
    url = Column(String, nullable=False)
    type = Column(String, default="standard")
    local_path = Column(String, nullable=True)

    # Relationships
    product = relationship("DBProduct", back_populates="images")


async def init_db(database_url: str) -> None:
    """Initialize database schema."""
    engine = create_engine(database_url)
    Base.metadata.create_all(engine)
</database.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_core/client.py:
<client.py>
# genai-ecommerce/src/genai_ecommerce_core/client.py
"""API client for AboutYou e-commerce platform."""

import asyncio
from typing import Dict, Any, Optional
import httpx
from .models import ProductResponse


class AboutYouClient:
    """Client for AboutYou API."""

    BASE_URL = "https://api-cloud.aboutyou.de/v1"

    def __init__(self) -> None:
        """Initialize client with default headers."""
        self.headers = {
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) "
            "AppleWebKit/537.36 (KHTML, like Gecko) "
            "Chrome/121.0.0.0 Safari/537.36",
            "Accept": "application/json",
            "Accept-Language": "en-US,en;q=0.9",
        }
        self._rate_limit_delay = 1.0  # Delay between requests in seconds

    async def get_products(
        self,
        with_attributes: Optional[str] = None,
        limit: int = 100,
        filters: Optional[Dict[str, Any]] = None,
    ) -> ProductResponse:
        """
        Fetch products from the API.

        Args:
            with_attributes: Comma-separated list of attributes to include
            limit: Number of products to fetch
            filters: Additional filters to apply

        Returns:
            ProductResponse object containing products and pagination info
        """
        params = {
            "with": with_attributes or "categories,priceRange",
            "limit": limit,
        }
        if filters:
            for key, value in filters.items():
                params[f"filters[{key}]"] = value

        async with httpx.AsyncClient(headers=self.headers) as client:
            response = await client.get(
                f"{self.BASE_URL}/products",
                params=params,
            )
            response.raise_for_status()
            await asyncio.sleep(self._rate_limit_delay)

            return ProductResponse.model_validate(response.json())
</client.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/src/genai_ecommerce_core/__init__.py:
<__init__.py>
</__init__.py>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/pyproject.web.toml:
<pyproject.web.toml>
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "genai_ecommerce_web"
version = "0.1.0"
description = "Web interface for GenAI E-commerce project"
requires-python = ">=3.12,<3.13"

dependencies = [
    "genai_ecommerce_core",
    "fastapi>=0.109.0",
    "uvicorn>=0.27.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.9",
    "aiofiles>=23.2.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/genai_ecommerce_web"]

[tool.hatch.metadata]
allow-direct-references = true</pyproject.web.toml>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/pyproject.main.toml:
<pyproject.main.toml>
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "genai-ecommerce"
version = "0.1.0"
description = "GenAI E-commerce project with ML-powered recommendations"
requires-python = ">=3.12,<3.13"

[tool.hatch.build.targets.wheel]
packages = [
    "src/genai_ecommerce_core",
    "src/genai_ecommerce_ml",
    "src/genai_ecommerce_web"
]


[tool.hatch.metadata]
allow-direct-references = true

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = ["E", "W", "F", "I", "C", "B", "UP", "N", "ANN", "S", "A"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.12"
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.1.0",
    "ruff>=0.2.0",
    "mypy>=1.8.0",
    "ipykernel>=6.0.0",
]</pyproject.main.toml>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/pyproject.ml.toml:
<pyproject.ml.toml>
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "genai_ecommerce_ml"
version = "0.1.0"
description = "Machine learning components for GenAI E-commerce project"
requires-python = ">=3.12,<3.13"

dependencies = [
    "genai_ecommerce_core",
    "numpy>=1.24.0",
    "scikit-learn>=1.4.0",
    "sentence-transformers>=2.3.0",
    "torch>=2.2.0",
    "torchvision>=0.17.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/genai_ecommerce_ml"]

[tool.hatch.metadata]
allow-direct-references = true</pyproject.ml.toml>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/pyproject.core.toml:
<pyproject.core.toml>
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "genai_ecommerce_core"
version = "0.1.0"
description = "Core functionality for GenAI E-commerce project"
requires-python = ">=3.12,<3.13"

dependencies = [
    "pydantic>=2.6.0",
    "httpx>=0.26.0",
    "sqlalchemy>=2.0.0",
    "aiosqlite>=0.19.0",
    "pillow>=10.0.0",
    "pyyaml>=6.0.1",
    "python-dateutil>=2.8.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src/genai_ecommerce_core"]</pyproject.core.toml>

here is /Volumes/RodStorage/00_PARA/01_projects/01_active_repos/genai-ecommerce/Makefile:
<Makefile>
# Terminal colors
GREEN  := $(shell tput -Txterm setaf 2)
YELLOW := $(shell tput -Txterm setaf 3)
WHITE  := $(shell tput -Txterm setaf 7)
RESET  := $(shell tput -Txterm sgr0)
BLUE   := $(shell tput -Txterm setaf 4)

# Project settings
PYTHON_VERSION := 3.12
VENV_NAME := .venv
PYTHON := $(VENV_NAME)/bin/python
PROJECT_NAME := genai-ecommerce

# Test settings
TEST_PATH := tests/
PYTEST_ARGS ?= -v
COVERAGE_THRESHOLD := 90

RUN_ARGS ?= --help

help: ## Show this help message
	@echo ''
	@echo '${YELLOW}Development Guide${RESET}'
	@echo ''
	@echo '${YELLOW}Installation Options:${RESET}'
	@echo '  Core:       ${GREEN}make install-core${RESET}     - Install core package'
	@echo '  Web:        ${GREEN}make install-web${RESET}      - Install web package'
	@echo '  ML:         ${GREEN}make install-ml${RESET}       - Install ML package'
	@echo '  All:        ${GREEN}make install-all${RESET}      - Install all packages'
	@echo '  Development:${GREEN}make install-dev${RESET}      - Development tools'
	@echo ''
	@echo '${YELLOW}Development Workflow:${RESET}'
	@echo '  1. Setup:     ${GREEN}make setup${RESET}         - Full development environment'
	@echo '  2. Source:    ${GREEN}source setup.sh${RESET}    - Activate environment'
	@echo '  3. Install:   ${GREEN}make install-all${RESET}   - Install packages'
	@echo ''
	@echo '${YELLOW}Available Targets:${RESET}'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  ${YELLOW}%-15s${GREEN}%s${RESET}\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ''

# Development environment targets
.PHONY: env
env: ## Create virtual environment using uv
	@echo "${BLUE}Creating virtual environment...${RESET}"
	uv venv --python $(PYTHON_VERSION)
	@echo "${GREEN}Virtual environment created. Activate it with:${RESET}"
	@echo "source $(VENV_NAME)/bin/activate"

.PHONY: install-core
install-core: ## Install core package
	@echo "${BLUE}Installing core package...${RESET}"
	cp pyproject.core.toml pyproject.toml
	uv pip install -e .
	rm pyproject.toml

.PHONY: install-web
install-web: ## Install web package
	@echo "${BLUE}Installing web package...${RESET}"
	cp pyproject.web.toml pyproject.toml
	uv pip install -e .
	rm pyproject.toml

.PHONY: install-ml
install-ml: ## Install ML package
	@echo "${BLUE}Installing ML package...${RESET}"
	cp pyproject.ml.toml pyproject.toml
	uv pip install -e .
	rm pyproject.toml

.PHONY: install-all
install-all: install-core install-web install-ml ## Install all packages
	cp pyproject.main.toml pyproject.toml
	uv pip install -e .
	@echo "${GREEN}All packages installed successfully${RESET}"

.PHONY: install-dev
install-dev: ## Install all packages with development dependencies
	@echo "${BLUE}Installing packages with development tools...${RESET}"
	cp pyproject.core.toml pyproject.toml
	uv pip install -e ".[dev]"
	rm pyproject.toml
	cp pyproject.web.toml pyproject.toml
	uv pip install -e ".[dev]"
	rm pyproject.toml
	cp pyproject.ml.toml pyproject.toml
	uv pip install -e ".[dev]"
	rm pyproject.toml
	cp pyproject.main.toml pyproject.toml
	uv pip install -e ".[dev]"

.PHONY: setup
setup:
	@echo "${BLUE}Creating complete development environment...${RESET}"
	@echo '#!/bin/bash' > setup.sh
	@echo 'uv venv --python $(PYTHON_VERSION)' >> setup.sh
	@echo 'source $(VENV_NAME)/bin/activate' >> setup.sh
	@echo 'cat > pyproject.toml << EOL' >> setup.sh
	@echo '[build-system]' >> setup.sh
	@echo 'requires = ["hatchling"]' >> setup.sh
	@echo 'build-backend = "hatchling.build"' >> setup.sh
	@echo '[project]' >> setup.sh
	@echo 'name = "genai-ecommerce"' >> setup.sh
	@echo 'version = "0.1.0"' >> setup.sh
	@echo 'description = "GenAI E-commerce project with ML-powered recommendations"' >> setup.sh
	@echo 'requires-python = ">=3.12,<3.13"' >> setup.sh
	@echo 'dependencies = [' >> setup.sh
	@echo '    "genai_ecommerce_core @ file://.",' >> setup.sh
	@echo '    "genai_ecommerce_web @ file://.",' >> setup.sh
	@echo '    "genai_ecommerce_ml @ file://.",' >> setup.sh
	@echo ']' >> setup.sh
	@echo '[tool.hatch.metadata]' >> setup.sh
	@echo 'allow-direct-references = true' >> setup.sh
	@echo '[tool.ruff]' >> setup.sh
	@echo 'line-length = 88' >> setup.sh
	@echo 'target-version = "py312"' >> setup.sh
	@echo '[tool.ruff.lint]' >> setup.sh
	@echo 'select = ["E", "W", "F", "I", "C", "B", "UP", "N", "ANN", "S", "A"]' >> setup.sh
	@echo '[tool.ruff.format]' >> setup.sh
	@echo 'quote-style = "double"' >> setup.sh
	@echo 'indent-style = "space"' >> setup.sh
	@echo 'skip-magic-trailing-comma = false' >> setup.sh
	@echo 'line-ending = "auto"' >> setup.sh
	@echo '[tool.mypy]' >> setup.sh
	@echo 'python_version = "3.12"' >> setup.sh
	@echo 'disallow_untyped_defs = true' >> setup.sh
	@echo 'disallow_incomplete_defs = true' >> setup.sh
	@echo 'check_untyped_defs = true' >> setup.sh
	@echo 'disallow_untyped_decorators = true' >> setup.sh
	@echo 'no_implicit_optional = true' >> setup.sh
	@echo 'warn_redundant_casts = true' >> setup.sh
	@echo 'warn_unused_ignores = true' >> setup.sh
	@echo 'warn_return_any = true' >> setup.sh
	@echo 'strict_optional = true' >> setup.sh
	@echo '[project.optional-dependencies]' >> setup.sh
	@echo 'dev = [' >> setup.sh
	@echo '    "pytest>=7.0.0",' >> setup.sh
	@echo '    "pytest-cov>=4.1.0",' >> setup.sh
	@echo '    "ruff>=0.2.0",' >> setup.sh
	@echo '    "mypy>=1.8.0",' >> setup.sh
	@echo '    "ipykernel>=6.0.0",' >> setup.sh
	@echo ']' >> setup.sh
	@echo 'EOL' >> setup.sh
	@echo 'make install-all' >> setup.sh
	@echo 'rm "$$0"' >> setup.sh
	@chmod +x setup.sh
	@echo "${GREEN}Environment setup script created. To complete setup, run:${RESET}"
	@echo "${YELLOW}source setup.sh${RESET}"

.PHONY: run-web
run-web: ## Run web application
	$(PYTHON) -m genai_ecommerce_web

.PHONY: update
update: ## Update all dependencies
	@echo "${BLUE}Updating dependencies...${RESET}"
	make install-dev

.PHONY: test
test: install-dev ## Run tests with coverage
	$(PYTHON) -m pytest $(TEST_PATH) $(PYTEST_ARGS) --cov=src --cov-report=term-missing

.PHONY: format
format: install-dev ## Format code with ruff
	@echo "${BLUE}Formatting code...${RESET}"
	$(PYTHON) -m ruff format .

.PHONY: lint
lint: install-dev ## Run linters
	$(PYTHON) -m ruff check src/ tests/ examples/
	$(PYTHON) -m ruff format --check src/ tests/ examples/
	$(PYTHON) -m mypy src/ tests/ examples/

.PHONY: clean
clean: ## Clean build artifacts and cache
	rm -rf build/ dist/ *.egg-info .coverage .mypy_cache .pytest_cache .ruff_cache $(VENV_NAME)
	rm -rf setup.sh pyproject.toml
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete

.PHONY: pre-commit
pre-commit: format lint test clean ## Run all checks before committing
	@echo "${GREEN}‚úì All checks passed${RESET}"

.PHONY: structure
structure: ## Show project structure
	@echo "${YELLOW}Current Project Structure:${RESET}"
	@echo "${BLUE}"
	@if command -v tree > /dev/null; then \
		tree -a -I '.git|.venv|__pycache__|*.pyc|*.pyo|*.pyd|.pytest_cache|.ruff_cache|.coverage|htmlcov'; \
	else \
		find . -not -path '*/\.*' -not -path '*.pyc' -not -path '*/__pycache__/*' \
			-not -path './.venv/*' -not -path './build/*' -not -path './dist/*' \
			-not -path './*.egg-info/*' \
			| sort | \
			sed -e "s/[^-][^\/]*\// ‚îÇ   /g" -e "s/‚îú‚îÄ‚îÄ /‚îÇ‚îÄ‚îÄ /" -e "s/‚îî‚îÄ‚îÄ /‚îî‚îÄ‚îÄ /"; \
	fi
	@echo "${RESET}"

.DEFAULT_GOAL := help</Makefile>

